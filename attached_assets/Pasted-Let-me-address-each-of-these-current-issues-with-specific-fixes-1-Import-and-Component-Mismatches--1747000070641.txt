Let me address each of these current issues with specific fixes:
1. Import and Component Mismatches
PermissionGuard Import and Props
tsx// Fix for PermissionGuard import (named export vs default)
// Original incorrect code:
import PermissionGuard from '@/components/PermissionGuard';

// Corrected code:
import { PermissionGuard } from '@/components/PermissionGuard';

// Fix for PermissionGuard props
// Original incorrect usage:
<PermissionGuard requiredPermission="documents.view">
  {/* Content */}
</PermissionGuard>

// Corrected usage:
<PermissionGuard area="documents" permission="view">
  {/* Content */}
</PermissionGuard>
React Helmet Updates
tsx// Original incorrect imports
import { Helmet } from 'react-helmet';

// Corrected imports
import { Helmet } from 'react-helmet-async';

// Make sure your app is wrapped with HelmetProvider in _app.tsx or App.tsx:
import { HelmetProvider } from 'react-helmet-async';

// In _app.tsx/App.tsx
function App() {
  return (
    <HelmetProvider>
      {/* rest of your app */}
    </HelmetProvider>
  );
}
2. Schema Import Errors
Create Missing Tenant Schema
typescript// shared/schema/tenants.ts
import { pgTable, uuid, text, timestamp, numeric, integer, boolean, jsonb } from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';

export const tenants = pgTable('tenants', {
  id: uuid('id').default(sql`gen_random_uuid()`).primaryKey(),
  name: text('name').notNull(),
  domain: text('domain').unique(),
  settings: jsonb('settings').default({}),
  
  // AI usage limits and tracking
  aiQuotaLimit: numeric('ai_quota_limit', { precision: 10, scale: 2 }),
  currentMonthAITokens: integer('current_month_ai_tokens').default(0),
  currentMonthAICost: numeric('current_month_ai_cost', { precision: 10, scale: 2 }).default(0),
  
  // Storage limits
  storageLimitGB: integer('storage_limit_gb'),
  currentStorageUsageGB: numeric('current_storage_usage_gb', { precision: 10, scale: 2 }).default(0),
  
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at'),
  isActive: boolean('is_active').default(true),
});

// If you prefer not to use multi-tenancy yet
// Create a simplified version that your document schema can reference
export const tenants = pgTable('tenants', {
  id: uuid('id').default(sql`gen_random_uuid()`).primaryKey(),
  name: text('name').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});
Fix Document Schema Imports
typescript// shared/schema/documents.ts
import { pgTable, uuid, text, timestamp, boolean, jsonb, pgEnum, index } from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';
import { tenants } from './tenants'; // Make sure this path is correct
import { users } from './users'; // Make sure this exists too

// If you don't have a users table yet, create a simplified one
// shared/schema/users.ts
export const users = pgTable('users', {
  id: uuid('id').default(sql`gen_random_uuid()`).primaryKey(),
  email: text('email').notNull().unique(),
  name: text('name'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});

// If you need to temporarily disable tenant references:
export const documents = pgTable('documents', {
  id: uuid('id').default(sql`gen_random_uuid()`).primaryKey(),
  // ... other fields
  
  // Comment out or make optional the tenant reference
  // tenantId: uuid('tenant_id').notNull().references(() => tenants.id),
  tenantId: uuid('tenant_id'), // Temporarily make it not required
  
  // Or use a default value pointing to a pre-created tenant
  // tenantId: uuid('tenant_id').default('00000000-0000-0000-0000-000000000001').notNull(),
});
3. Type Definition Issues
Repository Type Mismatches
typescript// Original repository with type issues
const documentRepository = {
  findById: (id: string) => db.query.documents.findFirst({
    where: eq(documents.id, id)
  }),
};

// Fixed version with proper type handling
import { eq } from 'drizzle-orm';

const documentRepository = {
  findById: async (id: string) => {
    // Convert string to UUID if your DB needs it
    return await db.query.documents.findFirst({
      where: eq(documents.id, id as any) // Use type assertion if needed
    });
  },
};

// Alternative fix - create proper types
type DocumentId = string; // Or UUID type if you have it

const documentRepository = {
  findById: async (id: DocumentId) => {
    return await db.query.documents.findFirst({
      where: eq(documents.id, id as any)
    });
  },
};
Update Component Props Types
tsx// Fix component prop types
// Original with incorrect types
interface DocumentListProps {
  documents: any[]; // Too generic
}

// Fixed version
import { Document } from '@/types/document';

interface DocumentListProps {
  documents: Document[];
}

// Create the proper type if it doesn't exist
// types/document.ts
export interface Document {
  id: string;
  title: string;
  fileName: string;
  fileSize: string;
  mimeType: string;
  uploadedAt: string;
  // Add other fields as needed
}
4. Icon Reference Error
Fix FilePieIcon Reference
tsx// Original code with missing icon
import { FilePieIcon } from 'lucide-react';

// Fixed version - use PieChartIcon instead
import { PieChartIcon, FileTextIcon } from 'lucide-react';

// Or combine existing icons to create a custom component
const FilePieIcon = () => (
  <div className="relative">
    <FileTextIcon className="w-5 h-5" />
    <PieChartIcon className="w-3 h-3 absolute bottom-0 right-0" />
  </div>
);

// Alternative - use a different appropriate icon
import { FileBarChartIcon, FileSpreadsheetIcon } from 'lucide-react';

// Check available icons at https://lucide.dev/icons/
5. Implementation Strategy
To systematically address these issues, I recommend:

Fix the schema first:

Create any missing schema files (tenants, users if needed)
Update the document schema to properly reference these
Run a migration if needed


Update component imports and props:

Correct the PermissionGuard import and props
Update react-helmet to react-helmet-async
Fix the icon references


Address type issues:

Create proper type definitions
Update repositories to handle types correctly


Incremental testing:

Test each fix in isolation
Start with the schema and repository fixes
Then test the UI components



This approach will help you systematically resolve the issues while minimizing the risk of introducing new problems.