name: BlueEarthOne CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests?'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: 20
  PLAYWRIGHT_VERSION: 1.40.1
  POSTGRES_VERSION: 15

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Lint code
        run: npm run lint
      
      - name: TypeScript compile check
        run: npm run typecheck

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    if: ${{ inputs.skip_tests != true }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: coverage/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ inputs.skip_tests != true && github.event_name != 'pull_request' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: npx tsx e2e/setup/setupTestData.ts
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: coverage/integration/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: ${{ inputs.skip_tests != true && github.event_name != 'pull_request' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Setup E2E test environment
        run: bash scripts/setup-e2e-tests.sh --no-reset
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Start application in background
        run: |
          npm run start:test &
          # Wait for server to start
          npm run wait-on:server
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
          PORT: 3000
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: e2e/results/
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            node_modules/
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    concurrency:
      group: staging_environment
      cancel-in-progress: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to AWS
        run: |
          # Add your AWS deployment commands here
          # This is a placeholder for your actual deployment process
          echo "Deploying to staging environment..."
      
      - name: Run database migrations
        run: |
          # Run migrations after deployment
          echo "Running database migrations on staging..."
          # npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NODE_ENV: staging
      
      - name: Run health checks
        run: |
          echo "Running health checks on staging deployment..."
          bash scripts/health-check.sh https://staging.blueearth.example.com --level detailed --output json > health-check-results.json
          cat health-check-results.json
          if grep -q '"status":"fail"' health-check-results.json; then
            echo "Health check failed"
            exit 1
          fi
      
      - name: Notify on success
        if: success()
        run: |
          echo "Staging deployment completed successfully"
          # Add notification commands here (Slack, email, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, integration-tests, deploy-staging]
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    concurrency:
      group: production_environment
      cancel-in-progress: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Create database backup
        run: |
          echo "Creating production database backup before deployment..."
          # Add database backup commands here
          # pg_dump "${{ secrets.PRODUCTION_DATABASE_URL }}" > "backup-$(date +%Y%m%d-%H%M%S).sql"
      
      - name: Deploy to AWS
        run: |
          # Add your AWS deployment commands here
          # This is a placeholder for your actual deployment process
          echo "Deploying to production environment..."
      
      - name: Run database migrations
        run: |
          # Run migrations after deployment
          echo "Running database migrations on production..."
          # npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NODE_ENV: production
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production deployment..."
          # Add smoke test commands here
      
      - name: Run health checks
        run: |
          echo "Running health checks on production deployment..."
          bash scripts/health-check.sh https://app.blueearth.example.com --level detailed --output json > health-check-results.json
          cat health-check-results.json
          if grep -q '"status":"fail"' health-check-results.json; then
            echo "Health check failed"
            exit 1
          fi
      
      - name: Notify on success
        if: success()
        run: |
          echo "Production deployment completed successfully"
          # Add notification commands here (Slack, email, etc.)
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "Production deployment failed. Automatic rollback initiated."
          # Add rollback and notification commands here