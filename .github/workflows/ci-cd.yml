name: BlueEarthOne CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Run unit tests
        run: npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Run E2E tests
        run: |
          # Set up the test environment
          bash scripts/setup-e2e-tests.sh
          
          # Run E2E tests
          npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            .env.example
            package.json
            package-lock.json
  
  deploy-staging:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging server..."
          # Set up SSH and deploy
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Create deployment package
          tar -czf deployment.tar.gz dist/ package.json package-lock.json .env.example
          
          # Transfer deployment package to server
          scp deployment.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.STAGING_SERVER_IP }}:/tmp/
          
          # Execute remote deployment script
          ssh ${{ secrets.SSH_USER }}@${{ secrets.STAGING_SERVER_IP }} << 'EOF'
            set -e
            echo "Extracting deployment package..."
            mkdir -p /tmp/deploy
            tar -xzf /tmp/deployment.tar.gz -C /tmp/deploy
            
            # Create backup of current deployment
            echo "Creating backup..."
            NOW=$(date +"%Y%m%d%H%M%S")
            mkdir -p /var/www/backups/$NOW
            cp -r /var/www/blueearth/* /var/www/backups/$NOW/ || true
            ln -sfn /var/www/backups/$NOW /var/www/backups/latest
            
            # Deploy new version
            echo "Deploying new version..."
            rm -rf /var/www/blueearth/*
            cp -r /tmp/deploy/* /var/www/blueearth/
            
            # Install dependencies
            cd /var/www/blueearth
            npm ci --production
            
            # Apply environment variables
            cp /var/www/env/.env.staging .env
            
            # Run database migrations
            npm run db:push
            
            # Restart services
            echo "Restarting services..."
            pm2 restart blueearth || pm2 start dist/server/index.js --name blueearth
            
            # Clean up
            rm -rf /tmp/deploy
            rm /tmp/deployment.tar.gz
          EOF
        
      - name: Perform health check
        run: |
          echo "Performing health check..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.STAGING_DOMAIN }}/api/health)
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed!"
              exit 0
            fi
            
            echo "Health check failed (status $HTTP_STATUS), retrying in 10 seconds... (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep 10
          done
          
          echo "Health check failed after $MAX_RETRIES attempts. Initiating rollback."
          exit 1
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.STAGING_SERVER_IP }} << 'EOF'
            cd /var/www/blueearth
            bash scripts/rollback.sh
          EOF
  
  deploy-production:
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to production server
        run: |
          echo "Deploying to production server..."
          # Set up SSH and deploy
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Create deployment package
          tar -czf deployment.tar.gz dist/ package.json package-lock.json .env.example
          
          # Transfer deployment package to server
          scp deployment.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }}:/tmp/
          
          # Execute remote deployment script
          ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            set -e
            echo "Extracting deployment package..."
            mkdir -p /tmp/deploy
            tar -xzf /tmp/deployment.tar.gz -C /tmp/deploy
            
            # Create backup of current deployment
            echo "Creating backup..."
            NOW=$(date +"%Y%m%d%H%M%S")
            mkdir -p /var/www/backups/$NOW
            cp -r /var/www/blueearth/* /var/www/backups/$NOW/ || true
            ln -sfn /var/www/backups/$NOW /var/www/backups/latest
            
            # Create database backup
            echo "Creating database backup..."
            pg_dump -U postgres -h localhost blueearth > /var/www/backups/$NOW/db-backup.sql
            
            # Deploy new version
            echo "Deploying new version..."
            rm -rf /var/www/blueearth/*
            cp -r /tmp/deploy/* /var/www/blueearth/
            
            # Install dependencies
            cd /var/www/blueearth
            npm ci --production
            
            # Apply environment variables
            cp /var/www/env/.env.production .env
            
            # Run database migrations
            npm run db:push
            
            # Restart services
            echo "Restarting services..."
            pm2 restart blueearth || pm2 start dist/server/index.js --name blueearth
            
            # Clean up
            rm -rf /tmp/deploy
            rm /tmp/deployment.tar.gz
          EOF
      
      - name: Perform health check
        run: |
          echo "Performing health check..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_DOMAIN }}/api/health)
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed!"
              exit 0
            fi
            
            echo "Health check failed (status $HTTP_STATUS), retrying in 10 seconds... (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep 10
          done
          
          echo "Health check failed after $MAX_RETRIES attempts. Initiating rollback."
          exit 1
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            cd /var/www/blueearth
            bash scripts/rollback.sh
          EOF
      
      - name: Send deployment notification
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "â Successfully deployed BlueEarthOne to production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*BlueEarthOne Production Deployment Successful* â"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Deployment"
                      },
                      "url": "https://${{ secrets.PRODUCTION_DOMAIN }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK